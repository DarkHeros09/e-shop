// Code generated by sqlc. DO NOT EDIT.
// source: order_detail.sql

package db

import (
	"context"
)

const createOrderDetailAndPaymentDetail = `-- name: CreateOrderDetailAndPaymentDetail :one
WITH "payment_ins" AS (
INSERT INTO "payment_detail" (
  status,
  provider,
  amount 
) VALUES (
  'pending',
  'unknown',
   0
)
RETURNING id, order_id, amount, provider, status, created_at, updated_at
)

INSERT INTO "order_detail"( 
  user_id,
  total,
  payment_id
) VALUES (
  $1, $2, 
  (SELECT id FROM "payment_ins")
)
RETURNING id, user_id, total, payment_id, created_at, updated_at
`

type CreateOrderDetailAndPaymentDetailParams struct {
	UserID int64  `json:"user_id"`
	Total  string `json:"total"`
}

func (q *Queries) CreateOrderDetailAndPaymentDetail(ctx context.Context, arg CreateOrderDetailAndPaymentDetailParams) (OrderDetail, error) {
	row := q.db.QueryRowContext(ctx, createOrderDetailAndPaymentDetail, arg.UserID, arg.Total)
	var i OrderDetail
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Total,
		&i.PaymentID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteOrderDetail = `-- name: DeleteOrderDetail :exec
DELETE FROM "order_detail"
WHERE id = $1
`

func (q *Queries) DeleteOrderDetail(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteOrderDetail, id)
	return err
}

const getOrderDetail = `-- name: GetOrderDetail :one
SELECT id, user_id, total, payment_id, created_at, updated_at FROM "order_detail"
WHERE id = $1 
LIMIT 1
`

func (q *Queries) GetOrderDetail(ctx context.Context, id int64) (OrderDetail, error) {
	row := q.db.QueryRowContext(ctx, getOrderDetail, id)
	var i OrderDetail
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Total,
		&i.PaymentID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listOrderDetails = `-- name: ListOrderDetails :many
SELECT id, user_id, total, payment_id, created_at, updated_at FROM "order_detail"
WHERE user_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListOrderDetailsParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListOrderDetails(ctx context.Context, arg ListOrderDetailsParams) ([]OrderDetail, error) {
	rows, err := q.db.QueryContext(ctx, listOrderDetails, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []OrderDetail{}
	for rows.Next() {
		var i OrderDetail
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Total,
			&i.PaymentID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderDetail = `-- name: UpdateOrderDetail :one
UPDATE "order_detail"
SET total = $2
WHERE id = $1
RETURNING id, user_id, total, payment_id, created_at, updated_at
`

type UpdateOrderDetailParams struct {
	ID    int64  `json:"id"`
	Total string `json:"total"`
}

func (q *Queries) UpdateOrderDetail(ctx context.Context, arg UpdateOrderDetailParams) (OrderDetail, error) {
	row := q.db.QueryRowContext(ctx, updateOrderDetail, arg.ID, arg.Total)
	var i OrderDetail
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Total,
		&i.PaymentID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
