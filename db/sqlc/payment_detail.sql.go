// Code generated by sqlc. DO NOT EDIT.
// source: payment_detail.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createPaymentDetail = `-- name: CreatePaymentDetail :one
INSERT INTO "payment_detail" (
  order_id,
  amount,
  provider,
  status
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, order_id, amount, provider, status, created_at, updated_at
`

type CreatePaymentDetailParams struct {
	OrderID  int64  `json:"order_id"`
	Amount   int32  `json:"amount"`
	Provider string `json:"provider"`
	Status   string `json:"status"`
}

func (q *Queries) CreatePaymentDetail(ctx context.Context, arg CreatePaymentDetailParams) (PaymentDetail, error) {
	row := q.db.QueryRowContext(ctx, createPaymentDetail,
		arg.OrderID,
		arg.Amount,
		arg.Provider,
		arg.Status,
	)
	var i PaymentDetail
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.Amount,
		&i.Provider,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePaymentDetail = `-- name: DeletePaymentDetail :exec
DELETE FROM "payment_detail"
WHERE id = $1
`

func (q *Queries) DeletePaymentDetail(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePaymentDetail, id)
	return err
}

const getPaymentDetail = `-- name: GetPaymentDetail :one
SELECT "payment_detail".id, "payment_detail".order_id, "payment_detail".amount, 
"payment_detail".provider, "payment_detail".status, "payment_detail".created_at, 
"payment_detail".updated_at
FROM "payment_detail"
LEFT JOIN "order_detail" ON "order_detail".id = "payment_detail".order_id
WHERE "payment_detail".id = $1
AND "order_detail".user_id = $2 
LIMIT 1
`

type GetPaymentDetailParams struct {
	ID     int64 `json:"id"`
	UserID int64 `json:"user_id"`
}

func (q *Queries) GetPaymentDetail(ctx context.Context, arg GetPaymentDetailParams) (PaymentDetail, error) {
	row := q.db.QueryRowContext(ctx, getPaymentDetail, arg.ID, arg.UserID)
	var i PaymentDetail
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.Amount,
		&i.Provider,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listPaymentDetails = `-- name: ListPaymentDetails :many
SELECT payment_detail.id, order_id, amount, provider, status, payment_detail.created_at, payment_detail.updated_at, order_detail.id, user_id, total, payment_id, order_detail.created_at, order_detail.updated_at FROM "payment_detail"
LEFT JOIN "order_detail" ON "order_detail".id = "payment_detail".order_id
WHERE "order_detail".user_id = $1
ORDER BY "payment_detail".id
LIMIT $2
OFFSET $3
`

type ListPaymentDetailsParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListPaymentDetailsRow struct {
	ID          int64          `json:"id"`
	OrderID     int64          `json:"order_id"`
	Amount      int32          `json:"amount"`
	Provider    string         `json:"provider"`
	Status      string         `json:"status"`
	CreatedAt   time.Time      `json:"created_at"`
	UpdatedAt   time.Time      `json:"updated_at"`
	ID_2        sql.NullInt64  `json:"id_2"`
	UserID      sql.NullInt64  `json:"user_id"`
	Total       sql.NullString `json:"total"`
	PaymentID   sql.NullInt64  `json:"payment_id"`
	CreatedAt_2 sql.NullTime   `json:"created_at_2"`
	UpdatedAt_2 sql.NullTime   `json:"updated_at_2"`
}

func (q *Queries) ListPaymentDetails(ctx context.Context, arg ListPaymentDetailsParams) ([]ListPaymentDetailsRow, error) {
	rows, err := q.db.QueryContext(ctx, listPaymentDetails, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListPaymentDetailsRow{}
	for rows.Next() {
		var i ListPaymentDetailsRow
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.Amount,
			&i.Provider,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID_2,
			&i.UserID,
			&i.Total,
			&i.PaymentID,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePaymentDetail = `-- name: UpdatePaymentDetail :one
WITH t1 AS (
SELECT pd.id, pd.order_id, pd.amount, pd.provider, pd.status, pd.created_at, pd.updated_at 
FROM "payment_detail" AS pd 
LEFT JOIN "order_detail" ON "order_detail".payment_id = pd.id 
WHERE pd.id = $1
And user_id= $2
)

UPDATE "payment_detail"
SET order_id = $3,
amount = $4,
provider = $5,
status = $6 
WHERE "payment_detail".id = (SELECT id FROM t1)
RETURNING id, order_id, amount, provider, status, created_at, updated_at
`

type UpdatePaymentDetailParams struct {
	ID       int64  `json:"id"`
	UserID   int64  `json:"user_id"`
	OrderID  int64  `json:"order_id"`
	Amount   int32  `json:"amount"`
	Provider string `json:"provider"`
	Status   string `json:"status"`
}

func (q *Queries) UpdatePaymentDetail(ctx context.Context, arg UpdatePaymentDetailParams) (PaymentDetail, error) {
	row := q.db.QueryRowContext(ctx, updatePaymentDetail,
		arg.ID,
		arg.UserID,
		arg.OrderID,
		arg.Amount,
		arg.Provider,
		arg.Status,
	)
	var i PaymentDetail
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.Amount,
		&i.Provider,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
