// Code generated by sqlc. DO NOT EDIT.
// source: shopping_session.sql

package db

import (
	"context"
)

const createShoppingSession = `-- name: CreateShoppingSession :one
INSERT INTO "shopping_session" (
  user_id,
  total
) VALUES (
  $1, $2
)
RETURNING id, user_id, total, created_at, updated_at
`

type CreateShoppingSessionParams struct {
	UserID int64  `json:"user_id"`
	Total  string `json:"total"`
}

func (q *Queries) CreateShoppingSession(ctx context.Context, arg CreateShoppingSessionParams) (ShoppingSession, error) {
	row := q.db.QueryRowContext(ctx, createShoppingSession, arg.UserID, arg.Total)
	var i ShoppingSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Total,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteShoppingSession = `-- name: DeleteShoppingSession :exec
DELETE FROM "shopping_session"
WHERE id = $1
`

func (q *Queries) DeleteShoppingSession(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteShoppingSession, id)
	return err
}

const getShoppingSession = `-- name: GetShoppingSession :one
SELECT id, user_id, total, created_at, updated_at FROM "shopping_session"
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetShoppingSession(ctx context.Context, id int64) (ShoppingSession, error) {
	row := q.db.QueryRowContext(ctx, getShoppingSession, id)
	var i ShoppingSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Total,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listShoppingSessions = `-- name: ListShoppingSessions :many
SELECT id, user_id, total, created_at, updated_at FROM "shopping_session"
WHERE user_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListShoppingSessionsParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListShoppingSessions(ctx context.Context, arg ListShoppingSessionsParams) ([]ShoppingSession, error) {
	rows, err := q.db.QueryContext(ctx, listShoppingSessions, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ShoppingSession{}
	for rows.Next() {
		var i ShoppingSession
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Total,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateShoppingSession = `-- name: UpdateShoppingSession :one
UPDATE "shopping_session"
SET total = $2
WHERE id = $1
RETURNING id, user_id, total, created_at, updated_at
`

type UpdateShoppingSessionParams struct {
	ID    int64  `json:"id"`
	Total string `json:"total"`
}

func (q *Queries) UpdateShoppingSession(ctx context.Context, arg UpdateShoppingSessionParams) (ShoppingSession, error) {
	row := q.db.QueryRowContext(ctx, updateShoppingSession, arg.ID, arg.Total)
	var i ShoppingSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Total,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
