// Code generated by sqlc. DO NOT EDIT.
// source: user_payment.sql

package db

import (
	"context"
	"time"
)

const createUserPayment = `-- name: CreateUserPayment :one
INSERT INTO "user_payment" (
  user_id,
  payment_type,
  provider,
  account_no,
  expiry
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, user_id, payment_type, provider, account_no, expiry
`

type CreateUserPaymentParams struct {
	UserID      int64     `json:"user_id"`
	PaymentType string    `json:"payment_type"`
	Provider    string    `json:"provider"`
	AccountNo   int32     `json:"account_no"`
	Expiry      time.Time `json:"expiry"`
}

func (q *Queries) CreateUserPayment(ctx context.Context, arg CreateUserPaymentParams) (UserPayment, error) {
	row := q.db.QueryRowContext(ctx, createUserPayment,
		arg.UserID,
		arg.PaymentType,
		arg.Provider,
		arg.AccountNo,
		arg.Expiry,
	)
	var i UserPayment
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PaymentType,
		&i.Provider,
		&i.AccountNo,
		&i.Expiry,
	)
	return i, err
}

const deleteUserPayment = `-- name: DeleteUserPayment :exec
DELETE FROM "user_payment"
WHERE id = $1
`

func (q *Queries) DeleteUserPayment(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUserPayment, id)
	return err
}

const getUserPayment = `-- name: GetUserPayment :one
SELECT id, user_id, payment_type, provider, account_no, expiry FROM "user_payment"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserPayment(ctx context.Context, id int64) (UserPayment, error) {
	row := q.db.QueryRowContext(ctx, getUserPayment, id)
	var i UserPayment
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PaymentType,
		&i.Provider,
		&i.AccountNo,
		&i.Expiry,
	)
	return i, err
}

const getUserPaymentByUserID = `-- name: GetUserPaymentByUserID :one
SELECT id, user_id, payment_type, provider, account_no, expiry FROM "user_payment"
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetUserPaymentByUserID(ctx context.Context, userID int64) (UserPayment, error) {
	row := q.db.QueryRowContext(ctx, getUserPaymentByUserID, userID)
	var i UserPayment
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PaymentType,
		&i.Provider,
		&i.AccountNo,
		&i.Expiry,
	)
	return i, err
}

const listUserPayments = `-- name: ListUserPayments :many
SELECT id, user_id, payment_type, provider, account_no, expiry FROM "user_payment"
WHERE user_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListUserPaymentsParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUserPayments(ctx context.Context, arg ListUserPaymentsParams) ([]UserPayment, error) {
	rows, err := q.db.QueryContext(ctx, listUserPayments, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserPayment{}
	for rows.Next() {
		var i UserPayment
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.PaymentType,
			&i.Provider,
			&i.AccountNo,
			&i.Expiry,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserPaymentByUserID = `-- name: UpdateUserPaymentByUserID :one
UPDATE "user_payment"
SET payment_type = $3
WHERE user_id = $1
AND id = $2
RETURNING id, user_id, payment_type, provider, account_no, expiry
`

type UpdateUserPaymentByUserIDParams struct {
	UserID      int64  `json:"user_id"`
	ID          int64  `json:"id"`
	PaymentType string `json:"payment_type"`
}

func (q *Queries) UpdateUserPaymentByUserID(ctx context.Context, arg UpdateUserPaymentByUserIDParams) (UserPayment, error) {
	row := q.db.QueryRowContext(ctx, updateUserPaymentByUserID, arg.UserID, arg.ID, arg.PaymentType)
	var i UserPayment
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PaymentType,
		&i.Provider,
		&i.AccountNo,
		&i.Expiry,
	)
	return i, err
}
