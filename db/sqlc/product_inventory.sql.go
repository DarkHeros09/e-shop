// Code generated by sqlc. DO NOT EDIT.
// source: product_inventory.sql

package db

import (
	"context"
)

const createProductInventory = `-- name: CreateProductInventory :one
INSERT INTO "product_inventory" (
  quantity
) VALUES (
  $1
)
RETURNING id, quantity, active, created_at, updated_at
`

func (q *Queries) CreateProductInventory(ctx context.Context, quantity int32) (ProductInventory, error) {
	row := q.db.QueryRowContext(ctx, createProductInventory, quantity)
	var i ProductInventory
	err := row.Scan(
		&i.ID,
		&i.Quantity,
		&i.Active,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProductInventory = `-- name: DeleteProductInventory :exec
DELETE FROM "product_inventory"
WHERE id = $1
`

func (q *Queries) DeleteProductInventory(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteProductInventory, id)
	return err
}

const getProductInventory = `-- name: GetProductInventory :one
SELECT id, quantity, active, created_at, updated_at FROM "product_inventory"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProductInventory(ctx context.Context, id int64) (ProductInventory, error) {
	row := q.db.QueryRowContext(ctx, getProductInventory, id)
	var i ProductInventory
	err := row.Scan(
		&i.ID,
		&i.Quantity,
		&i.Active,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProductInventoryForUpdate = `-- name: GetProductInventoryForUpdate :one
SELECT id, quantity, active, created_at, updated_at FROM "product_inventory"
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetProductInventoryForUpdate(ctx context.Context, id int64) (ProductInventory, error) {
	row := q.db.QueryRowContext(ctx, getProductInventoryForUpdate, id)
	var i ProductInventory
	err := row.Scan(
		&i.ID,
		&i.Quantity,
		&i.Active,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listProductInventories = `-- name: ListProductInventories :many
SELECT id, quantity, active, created_at, updated_at FROM "product_inventory"
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListProductInventoriesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListProductInventories(ctx context.Context, arg ListProductInventoriesParams) ([]ProductInventory, error) {
	rows, err := q.db.QueryContext(ctx, listProductInventories, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProductInventory{}
	for rows.Next() {
		var i ProductInventory
		if err := rows.Scan(
			&i.ID,
			&i.Quantity,
			&i.Active,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProductInventory = `-- name: UpdateProductInventory :one
UPDATE "product_inventory"
SET quantity = $2,
active= $3
WHERE id = $1
RETURNING id, quantity, active, created_at, updated_at
`

type UpdateProductInventoryParams struct {
	ID       int64 `json:"id"`
	Quantity int32 `json:"quantity"`
	Active   bool  `json:"active"`
}

func (q *Queries) UpdateProductInventory(ctx context.Context, arg UpdateProductInventoryParams) (ProductInventory, error) {
	row := q.db.QueryRowContext(ctx, updateProductInventory, arg.ID, arg.Quantity, arg.Active)
	var i ProductInventory
	err := row.Scan(
		&i.ID,
		&i.Quantity,
		&i.Active,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateProductQuantity = `-- name: UpdateProductQuantity :one
UPDATE "product_inventory"
SET quantity = quantity + $1
WHERE id = $2
RETURNING id, quantity, active, created_at, updated_at
`

type UpdateProductQuantityParams struct {
	Quantity int32 `json:"quantity"`
	ID       int64 `json:"id"`
}

func (q *Queries) UpdateProductQuantity(ctx context.Context, arg UpdateProductQuantityParams) (ProductInventory, error) {
	row := q.db.QueryRowContext(ctx, updateProductQuantity, arg.Quantity, arg.ID)
	var i ProductInventory
	err := row.Scan(
		&i.ID,
		&i.Quantity,
		&i.Active,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
