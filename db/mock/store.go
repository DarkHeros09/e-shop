// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/DarkHeros09/e-shop/v2/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/DarkHeros09/e-shop/v2/db/sqlc"
	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateAdmin mocks base method.
func (m *MockStore) CreateAdmin(arg0 context.Context, arg1 db.CreateAdminParams) (db.Admin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAdmin", arg0, arg1)
	ret0, _ := ret[0].(db.Admin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAdmin indicates an expected call of CreateAdmin.
func (mr *MockStoreMockRecorder) CreateAdmin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAdmin", reflect.TypeOf((*MockStore)(nil).CreateAdmin), arg0, arg1)
}

// CreateAdminType mocks base method.
func (m *MockStore) CreateAdminType(arg0 context.Context, arg1 string) (db.AdminType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAdminType", arg0, arg1)
	ret0, _ := ret[0].(db.AdminType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAdminType indicates an expected call of CreateAdminType.
func (mr *MockStoreMockRecorder) CreateAdminType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAdminType", reflect.TypeOf((*MockStore)(nil).CreateAdminType), arg0, arg1)
}

// CreateCartItem mocks base method.
func (m *MockStore) CreateCartItem(arg0 context.Context, arg1 db.CreateCartItemParams) (db.CartItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCartItem", arg0, arg1)
	ret0, _ := ret[0].(db.CartItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCartItem indicates an expected call of CreateCartItem.
func (mr *MockStoreMockRecorder) CreateCartItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCartItem", reflect.TypeOf((*MockStore)(nil).CreateCartItem), arg0, arg1)
}

// CreateDiscount mocks base method.
func (m *MockStore) CreateDiscount(arg0 context.Context, arg1 db.CreateDiscountParams) (db.Discount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDiscount", arg0, arg1)
	ret0, _ := ret[0].(db.Discount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDiscount indicates an expected call of CreateDiscount.
func (mr *MockStoreMockRecorder) CreateDiscount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDiscount", reflect.TypeOf((*MockStore)(nil).CreateDiscount), arg0, arg1)
}

// CreateOrderDetail mocks base method.
func (m *MockStore) CreateOrderDetail(arg0 context.Context, arg1 db.CreateOrderDetailParams) (db.OrderDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderDetail", arg0, arg1)
	ret0, _ := ret[0].(db.OrderDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrderDetail indicates an expected call of CreateOrderDetail.
func (mr *MockStoreMockRecorder) CreateOrderDetail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderDetail", reflect.TypeOf((*MockStore)(nil).CreateOrderDetail), arg0, arg1)
}

// CreateOrderItem mocks base method.
func (m *MockStore) CreateOrderItem(arg0 context.Context, arg1 db.CreateOrderItemParams) (db.OrderItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderItem", arg0, arg1)
	ret0, _ := ret[0].(db.OrderItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrderItem indicates an expected call of CreateOrderItem.
func (mr *MockStoreMockRecorder) CreateOrderItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderItem", reflect.TypeOf((*MockStore)(nil).CreateOrderItem), arg0, arg1)
}

// CreatePaymentDetail mocks base method.
func (m *MockStore) CreatePaymentDetail(arg0 context.Context, arg1 db.CreatePaymentDetailParams) (db.PaymentDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePaymentDetail", arg0, arg1)
	ret0, _ := ret[0].(db.PaymentDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePaymentDetail indicates an expected call of CreatePaymentDetail.
func (mr *MockStoreMockRecorder) CreatePaymentDetail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePaymentDetail", reflect.TypeOf((*MockStore)(nil).CreatePaymentDetail), arg0, arg1)
}

// CreateProduct mocks base method.
func (m *MockStore) CreateProduct(arg0 context.Context, arg1 db.CreateProductParams) (db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", arg0, arg1)
	ret0, _ := ret[0].(db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockStoreMockRecorder) CreateProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockStore)(nil).CreateProduct), arg0, arg1)
}

// CreateProductCategory mocks base method.
func (m *MockStore) CreateProductCategory(arg0 context.Context, arg1 db.CreateProductCategoryParams) (db.ProductCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProductCategory", arg0, arg1)
	ret0, _ := ret[0].(db.ProductCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProductCategory indicates an expected call of CreateProductCategory.
func (mr *MockStoreMockRecorder) CreateProductCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProductCategory", reflect.TypeOf((*MockStore)(nil).CreateProductCategory), arg0, arg1)
}

// CreateProductInventory mocks base method.
func (m *MockStore) CreateProductInventory(arg0 context.Context, arg1 int32) (db.ProductInventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProductInventory", arg0, arg1)
	ret0, _ := ret[0].(db.ProductInventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProductInventory indicates an expected call of CreateProductInventory.
func (mr *MockStoreMockRecorder) CreateProductInventory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProductInventory", reflect.TypeOf((*MockStore)(nil).CreateProductInventory), arg0, arg1)
}

// CreateShoppingSession mocks base method.
func (m *MockStore) CreateShoppingSession(arg0 context.Context, arg1 db.CreateShoppingSessionParams) (db.ShoppingSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShoppingSession", arg0, arg1)
	ret0, _ := ret[0].(db.ShoppingSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateShoppingSession indicates an expected call of CreateShoppingSession.
func (mr *MockStoreMockRecorder) CreateShoppingSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShoppingSession", reflect.TypeOf((*MockStore)(nil).CreateShoppingSession), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// CreateUserAddress mocks base method.
func (m *MockStore) CreateUserAddress(arg0 context.Context, arg1 db.CreateUserAddressParams) (db.UserAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserAddress", arg0, arg1)
	ret0, _ := ret[0].(db.UserAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserAddress indicates an expected call of CreateUserAddress.
func (mr *MockStoreMockRecorder) CreateUserAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserAddress", reflect.TypeOf((*MockStore)(nil).CreateUserAddress), arg0, arg1)
}

// CreateUserPayment mocks base method.
func (m *MockStore) CreateUserPayment(arg0 context.Context, arg1 db.CreateUserPaymentParams) (db.UserPayment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserPayment", arg0, arg1)
	ret0, _ := ret[0].(db.UserPayment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserPayment indicates an expected call of CreateUserPayment.
func (mr *MockStoreMockRecorder) CreateUserPayment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserPayment", reflect.TypeOf((*MockStore)(nil).CreateUserPayment), arg0, arg1)
}

// DeleteAdmin mocks base method.
func (m *MockStore) DeleteAdmin(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAdmin", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAdmin indicates an expected call of DeleteAdmin.
func (mr *MockStoreMockRecorder) DeleteAdmin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAdmin", reflect.TypeOf((*MockStore)(nil).DeleteAdmin), arg0, arg1)
}

// DeleteAdminTypeByID mocks base method.
func (m *MockStore) DeleteAdminTypeByID(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAdminTypeByID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAdminTypeByID indicates an expected call of DeleteAdminTypeByID.
func (mr *MockStoreMockRecorder) DeleteAdminTypeByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAdminTypeByID", reflect.TypeOf((*MockStore)(nil).DeleteAdminTypeByID), arg0, arg1)
}

// DeleteAdminTypeByType mocks base method.
func (m *MockStore) DeleteAdminTypeByType(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAdminTypeByType", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAdminTypeByType indicates an expected call of DeleteAdminTypeByType.
func (mr *MockStoreMockRecorder) DeleteAdminTypeByType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAdminTypeByType", reflect.TypeOf((*MockStore)(nil).DeleteAdminTypeByType), arg0, arg1)
}

// DeleteCartItem mocks base method.
func (m *MockStore) DeleteCartItem(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCartItem", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCartItem indicates an expected call of DeleteCartItem.
func (mr *MockStoreMockRecorder) DeleteCartItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCartItem", reflect.TypeOf((*MockStore)(nil).DeleteCartItem), arg0, arg1)
}

// DeleteDiscount mocks base method.
func (m *MockStore) DeleteDiscount(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDiscount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDiscount indicates an expected call of DeleteDiscount.
func (mr *MockStoreMockRecorder) DeleteDiscount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDiscount", reflect.TypeOf((*MockStore)(nil).DeleteDiscount), arg0, arg1)
}

// DeleteOrderDetail mocks base method.
func (m *MockStore) DeleteOrderDetail(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrderDetail", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrderDetail indicates an expected call of DeleteOrderDetail.
func (mr *MockStoreMockRecorder) DeleteOrderDetail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrderDetail", reflect.TypeOf((*MockStore)(nil).DeleteOrderDetail), arg0, arg1)
}

// DeleteOrderItem mocks base method.
func (m *MockStore) DeleteOrderItem(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrderItem", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrderItem indicates an expected call of DeleteOrderItem.
func (mr *MockStoreMockRecorder) DeleteOrderItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrderItem", reflect.TypeOf((*MockStore)(nil).DeleteOrderItem), arg0, arg1)
}

// DeletePaymentDetail mocks base method.
func (m *MockStore) DeletePaymentDetail(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePaymentDetail", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePaymentDetail indicates an expected call of DeletePaymentDetail.
func (mr *MockStoreMockRecorder) DeletePaymentDetail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePaymentDetail", reflect.TypeOf((*MockStore)(nil).DeletePaymentDetail), arg0, arg1)
}

// DeleteProduct mocks base method.
func (m *MockStore) DeleteProduct(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockStoreMockRecorder) DeleteProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockStore)(nil).DeleteProduct), arg0, arg1)
}

// DeleteProductCategory mocks base method.
func (m *MockStore) DeleteProductCategory(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProductCategory", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProductCategory indicates an expected call of DeleteProductCategory.
func (mr *MockStoreMockRecorder) DeleteProductCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductCategory", reflect.TypeOf((*MockStore)(nil).DeleteProductCategory), arg0, arg1)
}

// DeleteProductInventory mocks base method.
func (m *MockStore) DeleteProductInventory(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProductInventory", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProductInventory indicates an expected call of DeleteProductInventory.
func (mr *MockStoreMockRecorder) DeleteProductInventory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductInventory", reflect.TypeOf((*MockStore)(nil).DeleteProductInventory), arg0, arg1)
}

// DeleteShoppingSession mocks base method.
func (m *MockStore) DeleteShoppingSession(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteShoppingSession", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteShoppingSession indicates an expected call of DeleteShoppingSession.
func (mr *MockStoreMockRecorder) DeleteShoppingSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteShoppingSession", reflect.TypeOf((*MockStore)(nil).DeleteShoppingSession), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockStore) DeleteUser(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockStoreMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStore)(nil).DeleteUser), arg0, arg1)
}

// DeleteUserAddress mocks base method.
func (m *MockStore) DeleteUserAddress(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserAddress", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserAddress indicates an expected call of DeleteUserAddress.
func (mr *MockStoreMockRecorder) DeleteUserAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserAddress", reflect.TypeOf((*MockStore)(nil).DeleteUserAddress), arg0, arg1)
}

// DeleteUserPayment mocks base method.
func (m *MockStore) DeleteUserPayment(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserPayment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserPayment indicates an expected call of DeleteUserPayment.
func (mr *MockStoreMockRecorder) DeleteUserPayment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserPayment", reflect.TypeOf((*MockStore)(nil).DeleteUserPayment), arg0, arg1)
}

// FinishedPurchaseTx mocks base method.
func (m *MockStore) FinishedPurchaseTx(arg0 context.Context, arg1 db.FinishedPurchaseTxParams) (db.FinishedPurchaseTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinishedPurchaseTx", arg0, arg1)
	ret0, _ := ret[0].(db.FinishedPurchaseTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FinishedPurchaseTx indicates an expected call of FinishedPurchaseTx.
func (mr *MockStoreMockRecorder) FinishedPurchaseTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishedPurchaseTx", reflect.TypeOf((*MockStore)(nil).FinishedPurchaseTx), arg0, arg1)
}

// GetAdmin mocks base method.
func (m *MockStore) GetAdmin(arg0 context.Context, arg1 int64) (db.Admin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdmin", arg0, arg1)
	ret0, _ := ret[0].(db.Admin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdmin indicates an expected call of GetAdmin.
func (mr *MockStoreMockRecorder) GetAdmin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdmin", reflect.TypeOf((*MockStore)(nil).GetAdmin), arg0, arg1)
}

// GetAdminByEmail mocks base method.
func (m *MockStore) GetAdminByEmail(arg0 context.Context, arg1 string) (db.Admin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdminByEmail", arg0, arg1)
	ret0, _ := ret[0].(db.Admin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdminByEmail indicates an expected call of GetAdminByEmail.
func (mr *MockStoreMockRecorder) GetAdminByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdminByEmail", reflect.TypeOf((*MockStore)(nil).GetAdminByEmail), arg0, arg1)
}

// GetAdminType mocks base method.
func (m *MockStore) GetAdminType(arg0 context.Context, arg1 int64) (db.AdminType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdminType", arg0, arg1)
	ret0, _ := ret[0].(db.AdminType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdminType indicates an expected call of GetAdminType.
func (mr *MockStoreMockRecorder) GetAdminType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdminType", reflect.TypeOf((*MockStore)(nil).GetAdminType), arg0, arg1)
}

// GetCartItem mocks base method.
func (m *MockStore) GetCartItem(arg0 context.Context, arg1 int64) (db.CartItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartItem", arg0, arg1)
	ret0, _ := ret[0].(db.CartItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartItem indicates an expected call of GetCartItem.
func (mr *MockStoreMockRecorder) GetCartItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartItem", reflect.TypeOf((*MockStore)(nil).GetCartItem), arg0, arg1)
}

// GetDiscount mocks base method.
func (m *MockStore) GetDiscount(arg0 context.Context, arg1 int64) (db.Discount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiscount", arg0, arg1)
	ret0, _ := ret[0].(db.Discount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiscount indicates an expected call of GetDiscount.
func (mr *MockStoreMockRecorder) GetDiscount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiscount", reflect.TypeOf((*MockStore)(nil).GetDiscount), arg0, arg1)
}

// GetOrderDetail mocks base method.
func (m *MockStore) GetOrderDetail(arg0 context.Context, arg1 int64) (db.OrderDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderDetail", arg0, arg1)
	ret0, _ := ret[0].(db.OrderDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderDetail indicates an expected call of GetOrderDetail.
func (mr *MockStoreMockRecorder) GetOrderDetail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderDetail", reflect.TypeOf((*MockStore)(nil).GetOrderDetail), arg0, arg1)
}

// GetOrderItemByID mocks base method.
func (m *MockStore) GetOrderItemByID(arg0 context.Context, arg1 int64) (db.OrderItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderItemByID", arg0, arg1)
	ret0, _ := ret[0].(db.OrderItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderItemByID indicates an expected call of GetOrderItemByID.
func (mr *MockStoreMockRecorder) GetOrderItemByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderItemByID", reflect.TypeOf((*MockStore)(nil).GetOrderItemByID), arg0, arg1)
}

// GetOrderItemByOrderDetailID mocks base method.
func (m *MockStore) GetOrderItemByOrderDetailID(arg0 context.Context, arg1 int64) (db.OrderItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderItemByOrderDetailID", arg0, arg1)
	ret0, _ := ret[0].(db.OrderItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderItemByOrderDetailID indicates an expected call of GetOrderItemByOrderDetailID.
func (mr *MockStoreMockRecorder) GetOrderItemByOrderDetailID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderItemByOrderDetailID", reflect.TypeOf((*MockStore)(nil).GetOrderItemByOrderDetailID), arg0, arg1)
}

// GetPaymentDetail mocks base method.
func (m *MockStore) GetPaymentDetail(arg0 context.Context, arg1 int64) (db.PaymentDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentDetail", arg0, arg1)
	ret0, _ := ret[0].(db.PaymentDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentDetail indicates an expected call of GetPaymentDetail.
func (mr *MockStoreMockRecorder) GetPaymentDetail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentDetail", reflect.TypeOf((*MockStore)(nil).GetPaymentDetail), arg0, arg1)
}

// GetProduct mocks base method.
func (m *MockStore) GetProduct(arg0 context.Context, arg1 int64) (db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProduct", arg0, arg1)
	ret0, _ := ret[0].(db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProduct indicates an expected call of GetProduct.
func (mr *MockStoreMockRecorder) GetProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProduct", reflect.TypeOf((*MockStore)(nil).GetProduct), arg0, arg1)
}

// GetProductCategory mocks base method.
func (m *MockStore) GetProductCategory(arg0 context.Context, arg1 int64) (db.ProductCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductCategory", arg0, arg1)
	ret0, _ := ret[0].(db.ProductCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductCategory indicates an expected call of GetProductCategory.
func (mr *MockStoreMockRecorder) GetProductCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductCategory", reflect.TypeOf((*MockStore)(nil).GetProductCategory), arg0, arg1)
}

// GetProductInventory mocks base method.
func (m *MockStore) GetProductInventory(arg0 context.Context, arg1 int64) (db.ProductInventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductInventory", arg0, arg1)
	ret0, _ := ret[0].(db.ProductInventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductInventory indicates an expected call of GetProductInventory.
func (mr *MockStoreMockRecorder) GetProductInventory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductInventory", reflect.TypeOf((*MockStore)(nil).GetProductInventory), arg0, arg1)
}

// GetProductInventoryForUpdate mocks base method.
func (m *MockStore) GetProductInventoryForUpdate(arg0 context.Context, arg1 int64) (db.ProductInventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductInventoryForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.ProductInventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductInventoryForUpdate indicates an expected call of GetProductInventoryForUpdate.
func (mr *MockStoreMockRecorder) GetProductInventoryForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductInventoryForUpdate", reflect.TypeOf((*MockStore)(nil).GetProductInventoryForUpdate), arg0, arg1)
}

// GetShoppingSession mocks base method.
func (m *MockStore) GetShoppingSession(arg0 context.Context, arg1 int64) (db.ShoppingSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShoppingSession", arg0, arg1)
	ret0, _ := ret[0].(db.ShoppingSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShoppingSession indicates an expected call of GetShoppingSession.
func (mr *MockStoreMockRecorder) GetShoppingSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShoppingSession", reflect.TypeOf((*MockStore)(nil).GetShoppingSession), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(arg0 context.Context, arg1 int64) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), arg0, arg1)
}

// GetUserAddress mocks base method.
func (m *MockStore) GetUserAddress(arg0 context.Context, arg1 int64) (db.UserAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAddress", arg0, arg1)
	ret0, _ := ret[0].(db.UserAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAddress indicates an expected call of GetUserAddress.
func (mr *MockStoreMockRecorder) GetUserAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAddress", reflect.TypeOf((*MockStore)(nil).GetUserAddress), arg0, arg1)
}

// GetUserAddressByUserID mocks base method.
func (m *MockStore) GetUserAddressByUserID(arg0 context.Context, arg1 int64) (db.UserAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAddressByUserID", arg0, arg1)
	ret0, _ := ret[0].(db.UserAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAddressByUserID indicates an expected call of GetUserAddressByUserID.
func (mr *MockStoreMockRecorder) GetUserAddressByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAddressByUserID", reflect.TypeOf((*MockStore)(nil).GetUserAddressByUserID), arg0, arg1)
}

// GetUserByEmail mocks base method.
func (m *MockStore) GetUserByEmail(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockStoreMockRecorder) GetUserByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockStore)(nil).GetUserByEmail), arg0, arg1)
}

// GetUserByUsername mocks base method.
func (m *MockStore) GetUserByUsername(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockStoreMockRecorder) GetUserByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockStore)(nil).GetUserByUsername), arg0, arg1)
}

// GetUserPayment mocks base method.
func (m *MockStore) GetUserPayment(arg0 context.Context, arg1 int64) (db.UserPayment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPayment", arg0, arg1)
	ret0, _ := ret[0].(db.UserPayment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPayment indicates an expected call of GetUserPayment.
func (mr *MockStoreMockRecorder) GetUserPayment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPayment", reflect.TypeOf((*MockStore)(nil).GetUserPayment), arg0, arg1)
}

// GetUserPaymentByUserID mocks base method.
func (m *MockStore) GetUserPaymentByUserID(arg0 context.Context, arg1 int64) (db.UserPayment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPaymentByUserID", arg0, arg1)
	ret0, _ := ret[0].(db.UserPayment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPaymentByUserID indicates an expected call of GetUserPaymentByUserID.
func (mr *MockStoreMockRecorder) GetUserPaymentByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPaymentByUserID", reflect.TypeOf((*MockStore)(nil).GetUserPaymentByUserID), arg0, arg1)
}

// ListAdminTypes mocks base method.
func (m *MockStore) ListAdminTypes(arg0 context.Context, arg1 db.ListAdminTypesParams) ([]db.AdminType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAdminTypes", arg0, arg1)
	ret0, _ := ret[0].([]db.AdminType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAdminTypes indicates an expected call of ListAdminTypes.
func (mr *MockStoreMockRecorder) ListAdminTypes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAdminTypes", reflect.TypeOf((*MockStore)(nil).ListAdminTypes), arg0, arg1)
}

// ListAdmins mocks base method.
func (m *MockStore) ListAdmins(arg0 context.Context, arg1 db.ListAdminsParams) ([]db.Admin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAdmins", arg0, arg1)
	ret0, _ := ret[0].([]db.Admin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAdmins indicates an expected call of ListAdmins.
func (mr *MockStoreMockRecorder) ListAdmins(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAdmins", reflect.TypeOf((*MockStore)(nil).ListAdmins), arg0, arg1)
}

// ListCartItem mocks base method.
func (m *MockStore) ListCartItem(arg0 context.Context, arg1 db.ListCartItemParams) ([]db.CartItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCartItem", arg0, arg1)
	ret0, _ := ret[0].([]db.CartItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCartItem indicates an expected call of ListCartItem.
func (mr *MockStoreMockRecorder) ListCartItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCartItem", reflect.TypeOf((*MockStore)(nil).ListCartItem), arg0, arg1)
}

// ListDiscounts mocks base method.
func (m *MockStore) ListDiscounts(arg0 context.Context, arg1 db.ListDiscountsParams) ([]db.Discount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDiscounts", arg0, arg1)
	ret0, _ := ret[0].([]db.Discount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDiscounts indicates an expected call of ListDiscounts.
func (mr *MockStoreMockRecorder) ListDiscounts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDiscounts", reflect.TypeOf((*MockStore)(nil).ListDiscounts), arg0, arg1)
}

// ListOrderDetails mocks base method.
func (m *MockStore) ListOrderDetails(arg0 context.Context, arg1 db.ListOrderDetailsParams) ([]db.OrderDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrderDetails", arg0, arg1)
	ret0, _ := ret[0].([]db.OrderDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrderDetails indicates an expected call of ListOrderDetails.
func (mr *MockStoreMockRecorder) ListOrderDetails(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrderDetails", reflect.TypeOf((*MockStore)(nil).ListOrderDetails), arg0, arg1)
}

// ListOrderItems mocks base method.
func (m *MockStore) ListOrderItems(arg0 context.Context, arg1 db.ListOrderItemsParams) ([]db.OrderItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrderItems", arg0, arg1)
	ret0, _ := ret[0].([]db.OrderItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrderItems indicates an expected call of ListOrderItems.
func (mr *MockStoreMockRecorder) ListOrderItems(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrderItems", reflect.TypeOf((*MockStore)(nil).ListOrderItems), arg0, arg1)
}

// ListPaymentDetails mocks base method.
func (m *MockStore) ListPaymentDetails(arg0 context.Context, arg1 db.ListPaymentDetailsParams) ([]db.PaymentDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPaymentDetails", arg0, arg1)
	ret0, _ := ret[0].([]db.PaymentDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPaymentDetails indicates an expected call of ListPaymentDetails.
func (mr *MockStoreMockRecorder) ListPaymentDetails(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPaymentDetails", reflect.TypeOf((*MockStore)(nil).ListPaymentDetails), arg0, arg1)
}

// ListProductCategories mocks base method.
func (m *MockStore) ListProductCategories(arg0 context.Context, arg1 db.ListProductCategoriesParams) ([]db.ProductCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProductCategories", arg0, arg1)
	ret0, _ := ret[0].([]db.ProductCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProductCategories indicates an expected call of ListProductCategories.
func (mr *MockStoreMockRecorder) ListProductCategories(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProductCategories", reflect.TypeOf((*MockStore)(nil).ListProductCategories), arg0, arg1)
}

// ListProductInventories mocks base method.
func (m *MockStore) ListProductInventories(arg0 context.Context, arg1 db.ListProductInventoriesParams) ([]db.ProductInventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProductInventories", arg0, arg1)
	ret0, _ := ret[0].([]db.ProductInventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProductInventories indicates an expected call of ListProductInventories.
func (mr *MockStoreMockRecorder) ListProductInventories(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProductInventories", reflect.TypeOf((*MockStore)(nil).ListProductInventories), arg0, arg1)
}

// ListProducts mocks base method.
func (m *MockStore) ListProducts(arg0 context.Context, arg1 db.ListProductsParams) ([]db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProducts", arg0, arg1)
	ret0, _ := ret[0].([]db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProducts indicates an expected call of ListProducts.
func (mr *MockStoreMockRecorder) ListProducts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProducts", reflect.TypeOf((*MockStore)(nil).ListProducts), arg0, arg1)
}

// ListShoppingSessions mocks base method.
func (m *MockStore) ListShoppingSessions(arg0 context.Context, arg1 db.ListShoppingSessionsParams) ([]db.ShoppingSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListShoppingSessions", arg0, arg1)
	ret0, _ := ret[0].([]db.ShoppingSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListShoppingSessions indicates an expected call of ListShoppingSessions.
func (mr *MockStoreMockRecorder) ListShoppingSessions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListShoppingSessions", reflect.TypeOf((*MockStore)(nil).ListShoppingSessions), arg0, arg1)
}

// ListUserAddresses mocks base method.
func (m *MockStore) ListUserAddresses(arg0 context.Context, arg1 db.ListUserAddressesParams) ([]db.UserAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserAddresses", arg0, arg1)
	ret0, _ := ret[0].([]db.UserAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserAddresses indicates an expected call of ListUserAddresses.
func (mr *MockStoreMockRecorder) ListUserAddresses(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserAddresses", reflect.TypeOf((*MockStore)(nil).ListUserAddresses), arg0, arg1)
}

// ListUserPayments mocks base method.
func (m *MockStore) ListUserPayments(arg0 context.Context, arg1 db.ListUserPaymentsParams) ([]db.UserPayment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserPayments", arg0, arg1)
	ret0, _ := ret[0].([]db.UserPayment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserPayments indicates an expected call of ListUserPayments.
func (mr *MockStoreMockRecorder) ListUserPayments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserPayments", reflect.TypeOf((*MockStore)(nil).ListUserPayments), arg0, arg1)
}

// ListUsers mocks base method.
func (m *MockStore) ListUsers(arg0 context.Context, arg1 db.ListUsersParams) ([]db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", arg0, arg1)
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockStoreMockRecorder) ListUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockStore)(nil).ListUsers), arg0, arg1)
}

// UpdateAdmin mocks base method.
func (m *MockStore) UpdateAdmin(arg0 context.Context, arg1 db.UpdateAdminParams) (db.Admin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAdmin", arg0, arg1)
	ret0, _ := ret[0].(db.Admin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAdmin indicates an expected call of UpdateAdmin.
func (mr *MockStoreMockRecorder) UpdateAdmin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAdmin", reflect.TypeOf((*MockStore)(nil).UpdateAdmin), arg0, arg1)
}

// UpdateAdminType mocks base method.
func (m *MockStore) UpdateAdminType(arg0 context.Context, arg1 db.UpdateAdminTypeParams) (db.AdminType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAdminType", arg0, arg1)
	ret0, _ := ret[0].(db.AdminType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAdminType indicates an expected call of UpdateAdminType.
func (mr *MockStoreMockRecorder) UpdateAdminType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAdminType", reflect.TypeOf((*MockStore)(nil).UpdateAdminType), arg0, arg1)
}

// UpdateCartItem mocks base method.
func (m *MockStore) UpdateCartItem(arg0 context.Context, arg1 db.UpdateCartItemParams) (db.CartItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCartItem", arg0, arg1)
	ret0, _ := ret[0].(db.CartItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCartItem indicates an expected call of UpdateCartItem.
func (mr *MockStoreMockRecorder) UpdateCartItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCartItem", reflect.TypeOf((*MockStore)(nil).UpdateCartItem), arg0, arg1)
}

// UpdateDiscount mocks base method.
func (m *MockStore) UpdateDiscount(arg0 context.Context, arg1 db.UpdateDiscountParams) (db.Discount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDiscount", arg0, arg1)
	ret0, _ := ret[0].(db.Discount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDiscount indicates an expected call of UpdateDiscount.
func (mr *MockStoreMockRecorder) UpdateDiscount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDiscount", reflect.TypeOf((*MockStore)(nil).UpdateDiscount), arg0, arg1)
}

// UpdateOrderDetail mocks base method.
func (m *MockStore) UpdateOrderDetail(arg0 context.Context, arg1 db.UpdateOrderDetailParams) (db.OrderDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderDetail", arg0, arg1)
	ret0, _ := ret[0].(db.OrderDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrderDetail indicates an expected call of UpdateOrderDetail.
func (mr *MockStoreMockRecorder) UpdateOrderDetail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderDetail", reflect.TypeOf((*MockStore)(nil).UpdateOrderDetail), arg0, arg1)
}

// UpdateOrderItem mocks base method.
func (m *MockStore) UpdateOrderItem(arg0 context.Context, arg1 db.UpdateOrderItemParams) (db.OrderItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderItem", arg0, arg1)
	ret0, _ := ret[0].(db.OrderItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrderItem indicates an expected call of UpdateOrderItem.
func (mr *MockStoreMockRecorder) UpdateOrderItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderItem", reflect.TypeOf((*MockStore)(nil).UpdateOrderItem), arg0, arg1)
}

// UpdatePaymentDetail mocks base method.
func (m *MockStore) UpdatePaymentDetail(arg0 context.Context, arg1 db.UpdatePaymentDetailParams) (db.PaymentDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePaymentDetail", arg0, arg1)
	ret0, _ := ret[0].(db.PaymentDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePaymentDetail indicates an expected call of UpdatePaymentDetail.
func (mr *MockStoreMockRecorder) UpdatePaymentDetail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePaymentDetail", reflect.TypeOf((*MockStore)(nil).UpdatePaymentDetail), arg0, arg1)
}

// UpdateProduct mocks base method.
func (m *MockStore) UpdateProduct(arg0 context.Context, arg1 db.UpdateProductParams) (db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", arg0, arg1)
	ret0, _ := ret[0].(db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockStoreMockRecorder) UpdateProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockStore)(nil).UpdateProduct), arg0, arg1)
}

// UpdateProductCategory mocks base method.
func (m *MockStore) UpdateProductCategory(arg0 context.Context, arg1 db.UpdateProductCategoryParams) (db.ProductCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductCategory", arg0, arg1)
	ret0, _ := ret[0].(db.ProductCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProductCategory indicates an expected call of UpdateProductCategory.
func (mr *MockStoreMockRecorder) UpdateProductCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductCategory", reflect.TypeOf((*MockStore)(nil).UpdateProductCategory), arg0, arg1)
}

// UpdateProductInventory mocks base method.
func (m *MockStore) UpdateProductInventory(arg0 context.Context, arg1 db.UpdateProductInventoryParams) (db.ProductInventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductInventory", arg0, arg1)
	ret0, _ := ret[0].(db.ProductInventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProductInventory indicates an expected call of UpdateProductInventory.
func (mr *MockStoreMockRecorder) UpdateProductInventory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductInventory", reflect.TypeOf((*MockStore)(nil).UpdateProductInventory), arg0, arg1)
}

// UpdateProductQuantity mocks base method.
func (m *MockStore) UpdateProductQuantity(arg0 context.Context, arg1 db.UpdateProductQuantityParams) (db.ProductInventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductQuantity", arg0, arg1)
	ret0, _ := ret[0].(db.ProductInventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProductQuantity indicates an expected call of UpdateProductQuantity.
func (mr *MockStoreMockRecorder) UpdateProductQuantity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductQuantity", reflect.TypeOf((*MockStore)(nil).UpdateProductQuantity), arg0, arg1)
}

// UpdateShoppingSession mocks base method.
func (m *MockStore) UpdateShoppingSession(arg0 context.Context, arg1 db.UpdateShoppingSessionParams) (db.ShoppingSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateShoppingSession", arg0, arg1)
	ret0, _ := ret[0].(db.ShoppingSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateShoppingSession indicates an expected call of UpdateShoppingSession.
func (mr *MockStoreMockRecorder) UpdateShoppingSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateShoppingSession", reflect.TypeOf((*MockStore)(nil).UpdateShoppingSession), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockStore) UpdateUser(arg0 context.Context, arg1 db.UpdateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockStoreMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStore)(nil).UpdateUser), arg0, arg1)
}

// UpdateUserAddress mocks base method.
func (m *MockStore) UpdateUserAddress(arg0 context.Context, arg1 db.UpdateUserAddressParams) (db.UserAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserAddress", arg0, arg1)
	ret0, _ := ret[0].(db.UserAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserAddress indicates an expected call of UpdateUserAddress.
func (mr *MockStoreMockRecorder) UpdateUserAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserAddress", reflect.TypeOf((*MockStore)(nil).UpdateUserAddress), arg0, arg1)
}

// UpdateUserAddressByUserID mocks base method.
func (m *MockStore) UpdateUserAddressByUserID(arg0 context.Context, arg1 db.UpdateUserAddressByUserIDParams) (db.UserAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserAddressByUserID", arg0, arg1)
	ret0, _ := ret[0].(db.UserAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserAddressByUserID indicates an expected call of UpdateUserAddressByUserID.
func (mr *MockStoreMockRecorder) UpdateUserAddressByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserAddressByUserID", reflect.TypeOf((*MockStore)(nil).UpdateUserAddressByUserID), arg0, arg1)
}

// UpdateUserPaymentByUserID mocks base method.
func (m *MockStore) UpdateUserPaymentByUserID(arg0 context.Context, arg1 db.UpdateUserPaymentByUserIDParams) (db.UserPayment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPaymentByUserID", arg0, arg1)
	ret0, _ := ret[0].(db.UserPayment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserPaymentByUserID indicates an expected call of UpdateUserPaymentByUserID.
func (mr *MockStoreMockRecorder) UpdateUserPaymentByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPaymentByUserID", reflect.TypeOf((*MockStore)(nil).UpdateUserPaymentByUserID), arg0, arg1)
}
